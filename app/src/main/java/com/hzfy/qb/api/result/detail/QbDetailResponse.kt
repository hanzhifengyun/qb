package com.hzfy.qb.api.result.detail

import com.hzfy.qb.model.detail.TorrentModel

data class QbDetailResponse(
    val categories: Map<String, CategoryResponse>?,
    val full_update: Boolean?,
    val rid: Long = 0L,
    val server_state: ServerState?,
    val tags: List<String>?,
    val torrents_removed: List<String>?,
    val trackers_removed: List<String>?,
    val torrents: Map<String, Torrent>?,
    val trackers: Map<String, List<String>>?,
)

data class CategoryResponse(val name: String? = null, val savePath: String)

data class ServerState(
    val alltime_dl: Long? = null,
    val alltime_ul: Long? = null,
    val average_time_queue: Long? = null,
    val connection_status: String? = null,
    val dht_nodes: Long? = null,
    val dl_info_data: Long? = null,
    val dl_info_speed: Long? = null,
    val dl_rate_limit: Long? = null,
    val free_space_on_disk: Long? = null,
    val global_ratio: String? = null,
    val queued_io_jobs: Long? = null,
    val queueing: Boolean? = null,
    val read_cache_hits: String? = null,
    val read_cache_overload: String? = null,
    val refresh_interval: Long? = null,
    val total_buffers_size: Long? = null,
    val total_peer_connections: Long? = null,
    val total_queued_size: Long? = null,
    val total_wasted_session: Long? = null,
    val up_info_data: Long? = null,
    val up_info_speed: Long? = null,
    val up_rate_limit: Long? = null,
    val use_alt_speed_limits: Boolean? = null,
    val use_subcategories: Boolean? = null,
    val write_cache_overload: String
)

data class Torrent(
    val added_on: Long? = null,
    val amount_left: Long? = null,
    val auto_tmm: Boolean? = null,
    val availability: Double? = null,
    val category: String? = null,
    val completed: Long? = null,
    val completion_on: Long? = null,
    val content_path: String? = null,
    val dl_limit: Long? = null,
    val dlspeed: Long? = null,
    val download_path: String? = null,
    val downloaded: Long? = null,
    val downloaded_session: Long? = null,
    val eta: Long? = null,
    val f_l_piece_prio: Boolean? = null,
    val force_start: Boolean? = null,
    val inactive_seeding_time_limit: Long? = null,
    val infohash_v1: String? = null,
    val infohash_v2: String? = null,
    val last_activity: Long? = null,
    val magnet_uri: String? = null,
    val max_inactive_seeding_time: Long? = null,
    val max_ratio: Long? = null,
    val max_seeding_time: Long? = null,
    val name: String? = null,
    val num_complete: Long? = null,
    val num_incomplete: Long? = null,
    val num_leechs: Long? = null,
    val num_seeds: Long? = null,
    val priority: Long? = null,
    val progress: Float? = null,
    val ratio: Double? = null,
    val ratio_limit: Long? = null,
    val save_path: String? = null,
    val seeding_time: Long? = null,
    val seeding_time_limit: Long? = null,
    val seen_complete: Long? = null,
    val seq_dl: Boolean? = null,
    val size: Long? = null,
    val state: String? = null,
    val super_seeding: Boolean? = null,
    val tags: String? = null,
    val time_active: Long? = null,
    val total_size: Long? = null,
    val tracker: String? = null,
    val trackers_count: Long? = null,
    val up_limit: Long? = null,
    val uploaded: Long? = null,
    val uploaded_session: Long? = null,
    val upspeed: Long? = null,


    ) {
    fun convertToTorrentModel(hash: String): TorrentModel {
        return TorrentModel(
            hash = hash,
            name = name,
            state = state,
            category = category,
            tags = tags,
            savePath = save_path,
            totalSize = total_size,
            lastSize = amount_left,
            selectedSize = size,
            progress = progress,
            ratio = ratio,
            createTime = added_on?.times(1000),
            downloadSpeed = dlspeed,
            uploadSpeed = upspeed,
            completeNumber = num_complete,
            incompleteNumber = num_incomplete,
            tracker = tracker,
        )
    }
}